1.jgadelange's answer worked before django rest 3 probably. If any one using the django rest framework 3* version, I think this would be helpful for that folk. one should keep validation process in model level and clean method may be the one solution. But django rest framework announcement says here that, if someone wants to validate rest-call in model .clean method, he/she should override the serializer validate method and need to call the clean method form this serializer class by the following way

(because doc says : clean() method will not be called as part of serializer validation)

class MySerializer(serializers.ModelSerializer):

   def validate(self, attrs):
     instance = MyModel(**attrs)
     instance.clean()
     return attrs

and model

class MyModel(models.Model):
    start_date = models.DateField()
    end_date = models.DateField()

    def clean(self):
        if self.end_date < self.start_date:
            raise ValidationError("End date must be after start date.")


2. Pre DRF 3.0 you could also add it to the clean function of a model, but this is not called anymore in DRF 3.0.

class MyModel(models.Model):
    start_date = models.DateField()
    end_date = models.DateField()
    def clean(self):
        if self.end_date < self.start_date:
            raise ValidationError("End date must be after start date.")

3. class MySerializer(serializers.ModelSerializer):
    def validate(self, data):
        """
        Check that the start is before the stop.
        """
        if data['start_date'] > data['end_date']:
            raise serializers.ValidationError("finish must occur after start")
        return data


4. If we want to be able to return complete object instances based on the validated data we need to implement one or both of the .create() and .update() methods. For example:

class CommentSerializer(serializers.Serializer):
    email = serializers.EmailField()
    content = serializers.CharField(max_length=200)
    created = serializers.DateTimeField()

	def create(self, validated_data):
		return Comment.objects.create(**validated_data)

	def update(self, instance, validated_data):
		instance.email = validated_data.get('email', instance.email)
		instance.content = validated_data.get('content', instance.content)
		instance.created = validated_data.get('created', instance.created)
		instance.save()
		return instance


5. In some cases the .create() and .update() method names may not be meaningful. For example, in a contact form we may not be creating new instances, but instead sending an email or other message.

In these cases you might instead choose to override .save() directly, as being more readable and meaningful.

For example:

class ContactForm(serializers.Serializer):
    email = serializers.EmailField()
    message = serializers.CharField()

    def save(self):
        email = self.validated_data['email']
        message = self.validated_data['message']
 	send_email(from=email, message=message)

6. Field-level validation

You can specify custom field-level validation by adding .validate_<field_name> methods to your Serializer subclass. These are similar to the .clean_<field_name> methods on Django forms.

class BlogPostSerializer(serializers.Serializer):
    title = serializers.CharField(max_length=100)
    content = serializers.CharField()

    def validate_title(self, value):
        """
        Check that the blog post is about Django.
        """
        if 'django' not in value.lower():
            raise serializers.ValidationError("Blog post is not about Django")
        return value

7.Object-level validation

class EventSerializer(serializers.Serializer):
    description = serializers.CharField(max_length=100)
    start = serializers.DateTimeField()
    finish = serializers.DateTimeField()

    def validate(self, data):
        """
        Check that start is before finish.
        """
        if data['start'] > data['finish']:
            raise serializers.ValidationError("finish must occur after start")
        return data

8. Dynamically modifying fields

class DynamicFieldsModelSerializer(serializers.ModelSerializer):
    """
    A ModelSerializer that takes an additional `fields` argument that
    controls which fields should be displayed.
    """

    def __init__(self, *args, **kwargs):
        # Don't pass the 'fields' arg up to the superclass
        fields = kwargs.pop('fields', None)

        # Instantiate the superclass normally
        super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs)

        if fields is not None:
            # Drop any fields that are not specified in the `fields` argument.
            allowed = set(fields)
            existing = set(self.fields)
            for field_name in existing - allowed:
                self.fields.pop(field_name)

9.Django Rest Framework - Override serializer create method for model with self-referential M2M field

class Profile(models.Model):
    following = models.ManyToManyField('Profile', related_name='followed')
    admin_notes = models.TextField()

And a Django Rest Framework serializer that looks like this:

class ProfileSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Profile
        fields = '__all__'

def create(self, validated_data):

    # First, remove following from the validated_data dict...
    following_data = validated_data.pop('following', None)

    # Set the admin_notes custom value...
    validated_data['admin_notes'] = 'Test'

    # Create the object instance...
    profile = Profile.objects.create(**validated_data)

    # Finally, add your many-to-many relationships...
    if following_data:
        for data in following_data:
            profile.followed.add(Profile.objects.get(**data))
    return profile


#################### OR OR 
class OrgUserRegistrationSerializer(ModelSerializer):
    individual = CustomIndividualSerializer()
    password = serializers.CharField(write_only=True)
    user_permission = UserPermissionSerializer()

    class Meta:
        model = OrgUser
        exclude = (
            'created_at',
            'last_modified',
            'last_login',
            'admin',
            'active',
            'user_ip',
        )

    def create(self, validated_data):
        user_permission = validated_data.pop('user_permission')
        validated_data['individual'] = validated_data['individual']['id']
        individual_contact = IndividualContact.objects.get(
            individual_id=validated_data['individual']
        )
        # validated_data['email'] = individual_contact.email
        validated_data['password'] = make_password(validated_data['password'])
        validated_data['individual'] = individual_contact.individual
        instance = super(self.__class__, self).create(validated_data)

        # Update User Permission Template
        permission_obj = PermissionUser.objects.filter(org_user=instance).first()
        instance.user_permission = super(
            UserPermissionSerializer,
            UserPermissionSerializer()
        ).update(permission_obj, user_permission)

        return instance

